// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TXReceiptOutput is an object representing the database table.
type TXReceiptOutput struct {
	ID            uint64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReceiptID     uint64        `boil:"receipt_id" json:"receipt_id" toml:"receipt_id" yaml:"receipt_id"`
	OutputAddress string        `boil:"output_address" json:"output_address" toml:"output_address" yaml:"output_address"`
	OutputAccount string        `boil:"output_account" json:"output_account" toml:"output_account" yaml:"output_account"`
	OutputAmount  types.Decimal `boil:"output_amount" json:"output_amount" toml:"output_amount" yaml:"output_amount"`
	IsChange      null.Bool     `boil:"is_change" json:"is_change,omitempty" toml:"is_change" yaml:"is_change,omitempty"`
	UpdatedAt     null.Time     `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *txReceiptOutputR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L txReceiptOutputL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TXReceiptOutputColumns = struct {
	ID            string
	ReceiptID     string
	OutputAddress string
	OutputAccount string
	OutputAmount  string
	IsChange      string
	UpdatedAt     string
}{
	ID:            "id",
	ReceiptID:     "receipt_id",
	OutputAddress: "output_address",
	OutputAccount: "output_account",
	OutputAmount:  "output_amount",
	IsChange:      "is_change",
	UpdatedAt:     "updated_at",
}

// Generated where

var TXReceiptOutputWhere = struct {
	ID            whereHelperuint64
	ReceiptID     whereHelperuint64
	OutputAddress whereHelperstring
	OutputAccount whereHelperstring
	OutputAmount  whereHelpertypes_Decimal
	IsChange      whereHelpernull_Bool
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperuint64{field: "`tx_receipt_output`.`id`"},
	ReceiptID:     whereHelperuint64{field: "`tx_receipt_output`.`receipt_id`"},
	OutputAddress: whereHelperstring{field: "`tx_receipt_output`.`output_address`"},
	OutputAccount: whereHelperstring{field: "`tx_receipt_output`.`output_account`"},
	OutputAmount:  whereHelpertypes_Decimal{field: "`tx_receipt_output`.`output_amount`"},
	IsChange:      whereHelpernull_Bool{field: "`tx_receipt_output`.`is_change`"},
	UpdatedAt:     whereHelpernull_Time{field: "`tx_receipt_output`.`updated_at`"},
}

// TXReceiptOutputRels is where relationship names are stored.
var TXReceiptOutputRels = struct {
}{}

// txReceiptOutputR is where relationships are stored.
type txReceiptOutputR struct {
}

// NewStruct creates a new relationship struct
func (*txReceiptOutputR) NewStruct() *txReceiptOutputR {
	return &txReceiptOutputR{}
}

// txReceiptOutputL is where Load methods for each relationship are stored.
type txReceiptOutputL struct{}

var (
	txReceiptOutputAllColumns            = []string{"id", "receipt_id", "output_address", "output_account", "output_amount", "is_change", "updated_at"}
	txReceiptOutputColumnsWithoutDefault = []string{"receipt_id", "output_address", "output_account", "output_amount"}
	txReceiptOutputColumnsWithDefault    = []string{"id", "is_change", "updated_at"}
	txReceiptOutputPrimaryKeyColumns     = []string{"id"}
)

type (
	// TXReceiptOutputSlice is an alias for a slice of pointers to TXReceiptOutput.
	// This should generally be used opposed to []TXReceiptOutput.
	TXReceiptOutputSlice []*TXReceiptOutput

	txReceiptOutputQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	txReceiptOutputType                 = reflect.TypeOf(&TXReceiptOutput{})
	txReceiptOutputMapping              = queries.MakeStructMapping(txReceiptOutputType)
	txReceiptOutputPrimaryKeyMapping, _ = queries.BindMapping(txReceiptOutputType, txReceiptOutputMapping, txReceiptOutputPrimaryKeyColumns)
	txReceiptOutputInsertCacheMut       sync.RWMutex
	txReceiptOutputInsertCache          = make(map[string]insertCache)
	txReceiptOutputUpdateCacheMut       sync.RWMutex
	txReceiptOutputUpdateCache          = make(map[string]updateCache)
	txReceiptOutputUpsertCacheMut       sync.RWMutex
	txReceiptOutputUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single txReceiptOutput record from the query.
func (q txReceiptOutputQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TXReceiptOutput, error) {
	o := &TXReceiptOutput{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tx_receipt_output")
	}

	return o, nil
}

// All returns all TXReceiptOutput records from the query.
func (q txReceiptOutputQuery) All(ctx context.Context, exec boil.ContextExecutor) (TXReceiptOutputSlice, error) {
	var o []*TXReceiptOutput

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TXReceiptOutput slice")
	}

	return o, nil
}

// Count returns the count of all TXReceiptOutput records in the query.
func (q txReceiptOutputQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tx_receipt_output rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q txReceiptOutputQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tx_receipt_output exists")
	}

	return count > 0, nil
}

// TXReceiptOutputs retrieves all the records using an executor.
func TXReceiptOutputs(mods ...qm.QueryMod) txReceiptOutputQuery {
	mods = append(mods, qm.From("`tx_receipt_output`"))
	return txReceiptOutputQuery{NewQuery(mods...)}
}

// FindTXReceiptOutput retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTXReceiptOutput(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*TXReceiptOutput, error) {
	txReceiptOutputObj := &TXReceiptOutput{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tx_receipt_output` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, txReceiptOutputObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tx_receipt_output")
	}

	return txReceiptOutputObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TXReceiptOutput) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tx_receipt_output provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(txReceiptOutputColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	txReceiptOutputInsertCacheMut.RLock()
	cache, cached := txReceiptOutputInsertCache[key]
	txReceiptOutputInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			txReceiptOutputAllColumns,
			txReceiptOutputColumnsWithDefault,
			txReceiptOutputColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(txReceiptOutputType, txReceiptOutputMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(txReceiptOutputType, txReceiptOutputMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tx_receipt_output` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tx_receipt_output` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tx_receipt_output` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, txReceiptOutputPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tx_receipt_output")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == txReceiptOutputMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tx_receipt_output")
	}

CacheNoHooks:
	if !cached {
		txReceiptOutputInsertCacheMut.Lock()
		txReceiptOutputInsertCache[key] = cache
		txReceiptOutputInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TXReceiptOutput.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TXReceiptOutput) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	txReceiptOutputUpdateCacheMut.RLock()
	cache, cached := txReceiptOutputUpdateCache[key]
	txReceiptOutputUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			txReceiptOutputAllColumns,
			txReceiptOutputPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tx_receipt_output, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tx_receipt_output` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, txReceiptOutputPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(txReceiptOutputType, txReceiptOutputMapping, append(wl, txReceiptOutputPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tx_receipt_output row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tx_receipt_output")
	}

	if !cached {
		txReceiptOutputUpdateCacheMut.Lock()
		txReceiptOutputUpdateCache[key] = cache
		txReceiptOutputUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q txReceiptOutputQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tx_receipt_output")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tx_receipt_output")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TXReceiptOutputSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txReceiptOutputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tx_receipt_output` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txReceiptOutputPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in txReceiptOutput slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all txReceiptOutput")
	}
	return rowsAff, nil
}

var mySQLTXReceiptOutputUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TXReceiptOutput) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tx_receipt_output provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(txReceiptOutputColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTXReceiptOutputUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	txReceiptOutputUpsertCacheMut.RLock()
	cache, cached := txReceiptOutputUpsertCache[key]
	txReceiptOutputUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			txReceiptOutputAllColumns,
			txReceiptOutputColumnsWithDefault,
			txReceiptOutputColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			txReceiptOutputAllColumns,
			txReceiptOutputPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert tx_receipt_output, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "tx_receipt_output", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tx_receipt_output` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(txReceiptOutputType, txReceiptOutputMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(txReceiptOutputType, txReceiptOutputMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tx_receipt_output")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == txReceiptOutputMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(txReceiptOutputType, txReceiptOutputMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tx_receipt_output")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tx_receipt_output")
	}

CacheNoHooks:
	if !cached {
		txReceiptOutputUpsertCacheMut.Lock()
		txReceiptOutputUpsertCache[key] = cache
		txReceiptOutputUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TXReceiptOutput record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TXReceiptOutput) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TXReceiptOutput provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), txReceiptOutputPrimaryKeyMapping)
	sql := "DELETE FROM `tx_receipt_output` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tx_receipt_output")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tx_receipt_output")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q txReceiptOutputQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no txReceiptOutputQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tx_receipt_output")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tx_receipt_output")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TXReceiptOutputSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txReceiptOutputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tx_receipt_output` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txReceiptOutputPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from txReceiptOutput slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tx_receipt_output")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TXReceiptOutput) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTXReceiptOutput(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TXReceiptOutputSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TXReceiptOutputSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txReceiptOutputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tx_receipt_output`.* FROM `tx_receipt_output` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txReceiptOutputPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TXReceiptOutputSlice")
	}

	*o = slice

	return nil
}

// TXReceiptOutputExists checks if the TXReceiptOutput row exists.
func TXReceiptOutputExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tx_receipt_output` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tx_receipt_output exists")
	}

	return exists, nil
}
