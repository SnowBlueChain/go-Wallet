// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TXPaymentInput is an object representing the database table.
type TXPaymentInput struct {
	ID                 uint64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReceiptID          uint64        `boil:"receipt_id" json:"receipt_id" toml:"receipt_id" yaml:"receipt_id"`
	InputTxid          string        `boil:"input_txid" json:"input_txid" toml:"input_txid" yaml:"input_txid"`
	InputVout          int           `boil:"input_vout" json:"input_vout" toml:"input_vout" yaml:"input_vout"`
	InputAddress       string        `boil:"input_address" json:"input_address" toml:"input_address" yaml:"input_address"`
	InputAccount       string        `boil:"input_account" json:"input_account" toml:"input_account" yaml:"input_account"`
	InputAmount        types.Decimal `boil:"input_amount" json:"input_amount" toml:"input_amount" yaml:"input_amount"`
	InputConfirmations uint64        `boil:"input_confirmations" json:"input_confirmations" toml:"input_confirmations" yaml:"input_confirmations"`
	UpdatedAt          null.Time     `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *txPaymentInputR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L txPaymentInputL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TXPaymentInputColumns = struct {
	ID                 string
	ReceiptID          string
	InputTxid          string
	InputVout          string
	InputAddress       string
	InputAccount       string
	InputAmount        string
	InputConfirmations string
	UpdatedAt          string
}{
	ID:                 "id",
	ReceiptID:          "receipt_id",
	InputTxid:          "input_txid",
	InputVout:          "input_vout",
	InputAddress:       "input_address",
	InputAccount:       "input_account",
	InputAmount:        "input_amount",
	InputConfirmations: "input_confirmations",
	UpdatedAt:          "updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var TXPaymentInputWhere = struct {
	ID                 whereHelperuint64
	ReceiptID          whereHelperuint64
	InputTxid          whereHelperstring
	InputVout          whereHelperint
	InputAddress       whereHelperstring
	InputAccount       whereHelperstring
	InputAmount        whereHelpertypes_Decimal
	InputConfirmations whereHelperuint64
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperuint64{field: "`tx_payment_input`.`id`"},
	ReceiptID:          whereHelperuint64{field: "`tx_payment_input`.`receipt_id`"},
	InputTxid:          whereHelperstring{field: "`tx_payment_input`.`input_txid`"},
	InputVout:          whereHelperint{field: "`tx_payment_input`.`input_vout`"},
	InputAddress:       whereHelperstring{field: "`tx_payment_input`.`input_address`"},
	InputAccount:       whereHelperstring{field: "`tx_payment_input`.`input_account`"},
	InputAmount:        whereHelpertypes_Decimal{field: "`tx_payment_input`.`input_amount`"},
	InputConfirmations: whereHelperuint64{field: "`tx_payment_input`.`input_confirmations`"},
	UpdatedAt:          whereHelpernull_Time{field: "`tx_payment_input`.`updated_at`"},
}

// TXPaymentInputRels is where relationship names are stored.
var TXPaymentInputRels = struct {
}{}

// txPaymentInputR is where relationships are stored.
type txPaymentInputR struct {
}

// NewStruct creates a new relationship struct
func (*txPaymentInputR) NewStruct() *txPaymentInputR {
	return &txPaymentInputR{}
}

// txPaymentInputL is where Load methods for each relationship are stored.
type txPaymentInputL struct{}

var (
	txPaymentInputAllColumns            = []string{"id", "receipt_id", "input_txid", "input_vout", "input_address", "input_account", "input_amount", "input_confirmations", "updated_at"}
	txPaymentInputColumnsWithoutDefault = []string{"receipt_id", "input_txid", "input_vout", "input_address", "input_account", "input_amount", "input_confirmations"}
	txPaymentInputColumnsWithDefault    = []string{"id", "updated_at"}
	txPaymentInputPrimaryKeyColumns     = []string{"id"}
)

type (
	// TXPaymentInputSlice is an alias for a slice of pointers to TXPaymentInput.
	// This should generally be used opposed to []TXPaymentInput.
	TXPaymentInputSlice []*TXPaymentInput

	txPaymentInputQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	txPaymentInputType                 = reflect.TypeOf(&TXPaymentInput{})
	txPaymentInputMapping              = queries.MakeStructMapping(txPaymentInputType)
	txPaymentInputPrimaryKeyMapping, _ = queries.BindMapping(txPaymentInputType, txPaymentInputMapping, txPaymentInputPrimaryKeyColumns)
	txPaymentInputInsertCacheMut       sync.RWMutex
	txPaymentInputInsertCache          = make(map[string]insertCache)
	txPaymentInputUpdateCacheMut       sync.RWMutex
	txPaymentInputUpdateCache          = make(map[string]updateCache)
	txPaymentInputUpsertCacheMut       sync.RWMutex
	txPaymentInputUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single txPaymentInput record from the query.
func (q txPaymentInputQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TXPaymentInput, error) {
	o := &TXPaymentInput{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tx_payment_input")
	}

	return o, nil
}

// All returns all TXPaymentInput records from the query.
func (q txPaymentInputQuery) All(ctx context.Context, exec boil.ContextExecutor) (TXPaymentInputSlice, error) {
	var o []*TXPaymentInput

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TXPaymentInput slice")
	}

	return o, nil
}

// Count returns the count of all TXPaymentInput records in the query.
func (q txPaymentInputQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tx_payment_input rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q txPaymentInputQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tx_payment_input exists")
	}

	return count > 0, nil
}

// TXPaymentInputs retrieves all the records using an executor.
func TXPaymentInputs(mods ...qm.QueryMod) txPaymentInputQuery {
	mods = append(mods, qm.From("`tx_payment_input`"))
	return txPaymentInputQuery{NewQuery(mods...)}
}

// FindTXPaymentInput retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTXPaymentInput(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*TXPaymentInput, error) {
	txPaymentInputObj := &TXPaymentInput{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tx_payment_input` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, txPaymentInputObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tx_payment_input")
	}

	return txPaymentInputObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TXPaymentInput) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tx_payment_input provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(txPaymentInputColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	txPaymentInputInsertCacheMut.RLock()
	cache, cached := txPaymentInputInsertCache[key]
	txPaymentInputInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			txPaymentInputAllColumns,
			txPaymentInputColumnsWithDefault,
			txPaymentInputColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(txPaymentInputType, txPaymentInputMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(txPaymentInputType, txPaymentInputMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tx_payment_input` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tx_payment_input` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tx_payment_input` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, txPaymentInputPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tx_payment_input")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == txPaymentInputMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tx_payment_input")
	}

CacheNoHooks:
	if !cached {
		txPaymentInputInsertCacheMut.Lock()
		txPaymentInputInsertCache[key] = cache
		txPaymentInputInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TXPaymentInput.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TXPaymentInput) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	txPaymentInputUpdateCacheMut.RLock()
	cache, cached := txPaymentInputUpdateCache[key]
	txPaymentInputUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			txPaymentInputAllColumns,
			txPaymentInputPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tx_payment_input, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tx_payment_input` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, txPaymentInputPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(txPaymentInputType, txPaymentInputMapping, append(wl, txPaymentInputPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tx_payment_input row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tx_payment_input")
	}

	if !cached {
		txPaymentInputUpdateCacheMut.Lock()
		txPaymentInputUpdateCache[key] = cache
		txPaymentInputUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q txPaymentInputQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tx_payment_input")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tx_payment_input")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TXPaymentInputSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txPaymentInputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tx_payment_input` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txPaymentInputPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in txPaymentInput slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all txPaymentInput")
	}
	return rowsAff, nil
}

var mySQLTXPaymentInputUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TXPaymentInput) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tx_payment_input provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(txPaymentInputColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTXPaymentInputUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	txPaymentInputUpsertCacheMut.RLock()
	cache, cached := txPaymentInputUpsertCache[key]
	txPaymentInputUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			txPaymentInputAllColumns,
			txPaymentInputColumnsWithDefault,
			txPaymentInputColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			txPaymentInputAllColumns,
			txPaymentInputPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert tx_payment_input, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "tx_payment_input", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tx_payment_input` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(txPaymentInputType, txPaymentInputMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(txPaymentInputType, txPaymentInputMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tx_payment_input")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == txPaymentInputMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(txPaymentInputType, txPaymentInputMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tx_payment_input")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tx_payment_input")
	}

CacheNoHooks:
	if !cached {
		txPaymentInputUpsertCacheMut.Lock()
		txPaymentInputUpsertCache[key] = cache
		txPaymentInputUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TXPaymentInput record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TXPaymentInput) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TXPaymentInput provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), txPaymentInputPrimaryKeyMapping)
	sql := "DELETE FROM `tx_payment_input` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tx_payment_input")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tx_payment_input")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q txPaymentInputQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no txPaymentInputQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tx_payment_input")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tx_payment_input")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TXPaymentInputSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txPaymentInputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tx_payment_input` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txPaymentInputPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from txPaymentInput slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tx_payment_input")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TXPaymentInput) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTXPaymentInput(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TXPaymentInputSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TXPaymentInputSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txPaymentInputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tx_payment_input`.* FROM `tx_payment_input` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txPaymentInputPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TXPaymentInputSlice")
	}

	*o = slice

	return nil
}

// TXPaymentInputExists checks if the TXPaymentInput row exists.
func TXPaymentInputExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tx_payment_input` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tx_payment_input exists")
	}

	return exists, nil
}
