// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TXPayment is an object representing the database table.
type TXPayment struct {
	ID                uint64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UnsignedHexTX     string        `boil:"unsigned_hex_tx" json:"unsigned_hex_tx" toml:"unsigned_hex_tx" yaml:"unsigned_hex_tx"`
	SignedHexTX       null.String   `boil:"signed_hex_tx" json:"signed_hex_tx,omitempty" toml:"signed_hex_tx" yaml:"signed_hex_tx,omitempty"`
	SentHashTX        null.String   `boil:"sent_hash_tx" json:"sent_hash_tx,omitempty" toml:"sent_hash_tx" yaml:"sent_hash_tx,omitempty"`
	TotalInputAmount  types.Decimal `boil:"total_input_amount" json:"total_input_amount" toml:"total_input_amount" yaml:"total_input_amount"`
	TotalOutputAmount types.Decimal `boil:"total_output_amount" json:"total_output_amount" toml:"total_output_amount" yaml:"total_output_amount"`
	Fee               types.Decimal `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	CurrentTXType     bool          `boil:"current_tx_type" json:"current_tx_type" toml:"current_tx_type" yaml:"current_tx_type"`
	UnsignedUpdatedAt null.Time     `boil:"unsigned_updated_at" json:"unsigned_updated_at,omitempty" toml:"unsigned_updated_at" yaml:"unsigned_updated_at,omitempty"`
	SignedUpdatedAt   null.Time     `boil:"signed_updated_at" json:"signed_updated_at,omitempty" toml:"signed_updated_at" yaml:"signed_updated_at,omitempty"`
	SentUpdatedAt     null.Time     `boil:"sent_updated_at" json:"sent_updated_at,omitempty" toml:"sent_updated_at" yaml:"sent_updated_at,omitempty"`

	R *txPaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L txPaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TXPaymentColumns = struct {
	ID                string
	UnsignedHexTX     string
	SignedHexTX       string
	SentHashTX        string
	TotalInputAmount  string
	TotalOutputAmount string
	Fee               string
	CurrentTXType     string
	UnsignedUpdatedAt string
	SignedUpdatedAt   string
	SentUpdatedAt     string
}{
	ID:                "id",
	UnsignedHexTX:     "unsigned_hex_tx",
	SignedHexTX:       "signed_hex_tx",
	SentHashTX:        "sent_hash_tx",
	TotalInputAmount:  "total_input_amount",
	TotalOutputAmount: "total_output_amount",
	Fee:               "fee",
	CurrentTXType:     "current_tx_type",
	UnsignedUpdatedAt: "unsigned_updated_at",
	SignedUpdatedAt:   "signed_updated_at",
	SentUpdatedAt:     "sent_updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var TXPaymentWhere = struct {
	ID                whereHelperuint64
	UnsignedHexTX     whereHelperstring
	SignedHexTX       whereHelpernull_String
	SentHashTX        whereHelpernull_String
	TotalInputAmount  whereHelpertypes_Decimal
	TotalOutputAmount whereHelpertypes_Decimal
	Fee               whereHelpertypes_Decimal
	CurrentTXType     whereHelperbool
	UnsignedUpdatedAt whereHelpernull_Time
	SignedUpdatedAt   whereHelpernull_Time
	SentUpdatedAt     whereHelpernull_Time
}{
	ID:                whereHelperuint64{field: "`tx_payment`.`id`"},
	UnsignedHexTX:     whereHelperstring{field: "`tx_payment`.`unsigned_hex_tx`"},
	SignedHexTX:       whereHelpernull_String{field: "`tx_payment`.`signed_hex_tx`"},
	SentHashTX:        whereHelpernull_String{field: "`tx_payment`.`sent_hash_tx`"},
	TotalInputAmount:  whereHelpertypes_Decimal{field: "`tx_payment`.`total_input_amount`"},
	TotalOutputAmount: whereHelpertypes_Decimal{field: "`tx_payment`.`total_output_amount`"},
	Fee:               whereHelpertypes_Decimal{field: "`tx_payment`.`fee`"},
	CurrentTXType:     whereHelperbool{field: "`tx_payment`.`current_tx_type`"},
	UnsignedUpdatedAt: whereHelpernull_Time{field: "`tx_payment`.`unsigned_updated_at`"},
	SignedUpdatedAt:   whereHelpernull_Time{field: "`tx_payment`.`signed_updated_at`"},
	SentUpdatedAt:     whereHelpernull_Time{field: "`tx_payment`.`sent_updated_at`"},
}

// TXPaymentRels is where relationship names are stored.
var TXPaymentRels = struct {
}{}

// txPaymentR is where relationships are stored.
type txPaymentR struct {
}

// NewStruct creates a new relationship struct
func (*txPaymentR) NewStruct() *txPaymentR {
	return &txPaymentR{}
}

// txPaymentL is where Load methods for each relationship are stored.
type txPaymentL struct{}

var (
	txPaymentAllColumns            = []string{"id", "unsigned_hex_tx", "signed_hex_tx", "sent_hash_tx", "total_input_amount", "total_output_amount", "fee", "current_tx_type", "unsigned_updated_at", "signed_updated_at", "sent_updated_at"}
	txPaymentColumnsWithoutDefault = []string{"unsigned_hex_tx", "signed_hex_tx", "sent_hash_tx", "total_input_amount", "total_output_amount", "fee", "current_tx_type", "signed_updated_at", "sent_updated_at"}
	txPaymentColumnsWithDefault    = []string{"id", "unsigned_updated_at"}
	txPaymentPrimaryKeyColumns     = []string{"id"}
)

type (
	// TXPaymentSlice is an alias for a slice of pointers to TXPayment.
	// This should generally be used opposed to []TXPayment.
	TXPaymentSlice []*TXPayment

	txPaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	txPaymentType                 = reflect.TypeOf(&TXPayment{})
	txPaymentMapping              = queries.MakeStructMapping(txPaymentType)
	txPaymentPrimaryKeyMapping, _ = queries.BindMapping(txPaymentType, txPaymentMapping, txPaymentPrimaryKeyColumns)
	txPaymentInsertCacheMut       sync.RWMutex
	txPaymentInsertCache          = make(map[string]insertCache)
	txPaymentUpdateCacheMut       sync.RWMutex
	txPaymentUpdateCache          = make(map[string]updateCache)
	txPaymentUpsertCacheMut       sync.RWMutex
	txPaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single txPayment record from the query.
func (q txPaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TXPayment, error) {
	o := &TXPayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tx_payment")
	}

	return o, nil
}

// All returns all TXPayment records from the query.
func (q txPaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TXPaymentSlice, error) {
	var o []*TXPayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TXPayment slice")
	}

	return o, nil
}

// Count returns the count of all TXPayment records in the query.
func (q txPaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tx_payment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q txPaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tx_payment exists")
	}

	return count > 0, nil
}

// TXPayments retrieves all the records using an executor.
func TXPayments(mods ...qm.QueryMod) txPaymentQuery {
	mods = append(mods, qm.From("`tx_payment`"))
	return txPaymentQuery{NewQuery(mods...)}
}

// FindTXPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTXPayment(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*TXPayment, error) {
	txPaymentObj := &TXPayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tx_payment` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, txPaymentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tx_payment")
	}

	return txPaymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TXPayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tx_payment provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(txPaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	txPaymentInsertCacheMut.RLock()
	cache, cached := txPaymentInsertCache[key]
	txPaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			txPaymentAllColumns,
			txPaymentColumnsWithDefault,
			txPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(txPaymentType, txPaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(txPaymentType, txPaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tx_payment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tx_payment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tx_payment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, txPaymentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tx_payment")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == txPaymentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tx_payment")
	}

CacheNoHooks:
	if !cached {
		txPaymentInsertCacheMut.Lock()
		txPaymentInsertCache[key] = cache
		txPaymentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TXPayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TXPayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	txPaymentUpdateCacheMut.RLock()
	cache, cached := txPaymentUpdateCache[key]
	txPaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			txPaymentAllColumns,
			txPaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tx_payment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tx_payment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, txPaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(txPaymentType, txPaymentMapping, append(wl, txPaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tx_payment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tx_payment")
	}

	if !cached {
		txPaymentUpdateCacheMut.Lock()
		txPaymentUpdateCache[key] = cache
		txPaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q txPaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tx_payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tx_payment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TXPaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tx_payment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txPaymentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in txPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all txPayment")
	}
	return rowsAff, nil
}

var mySQLTXPaymentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TXPayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tx_payment provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(txPaymentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTXPaymentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	txPaymentUpsertCacheMut.RLock()
	cache, cached := txPaymentUpsertCache[key]
	txPaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			txPaymentAllColumns,
			txPaymentColumnsWithDefault,
			txPaymentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			txPaymentAllColumns,
			txPaymentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert tx_payment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "tx_payment", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tx_payment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(txPaymentType, txPaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(txPaymentType, txPaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tx_payment")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == txPaymentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(txPaymentType, txPaymentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tx_payment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tx_payment")
	}

CacheNoHooks:
	if !cached {
		txPaymentUpsertCacheMut.Lock()
		txPaymentUpsertCache[key] = cache
		txPaymentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TXPayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TXPayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TXPayment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), txPaymentPrimaryKeyMapping)
	sql := "DELETE FROM `tx_payment` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tx_payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tx_payment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q txPaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no txPaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tx_payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tx_payment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TXPaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tx_payment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txPaymentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from txPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tx_payment")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TXPayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTXPayment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TXPaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TXPaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), txPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tx_payment`.* FROM `tx_payment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, txPaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TXPaymentSlice")
	}

	*o = slice

	return nil
}

// TXPaymentExists checks if the TXPayment row exists.
func TXPaymentExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tx_payment` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tx_payment exists")
	}

	return exists, nil
}
