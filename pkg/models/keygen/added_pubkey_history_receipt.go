// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AddedPubkeyHistoryReceipt is an object representing the database table.
type AddedPubkeyHistoryReceipt struct {
	ID                    uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	FullPublicKey         string    `boil:"full_public_key" json:"full_public_key" toml:"full_public_key" yaml:"full_public_key"`
	AuthAddress1          string    `boil:"auth_address1" json:"auth_address1" toml:"auth_address1" yaml:"auth_address1"`
	AuthAddress2          string    `boil:"auth_address2" json:"auth_address2" toml:"auth_address2" yaml:"auth_address2"`
	WalletMultisigAddress string    `boil:"wallet_multisig_address" json:"wallet_multisig_address" toml:"wallet_multisig_address" yaml:"wallet_multisig_address"`
	RedeemScript          string    `boil:"redeem_script" json:"redeem_script" toml:"redeem_script" yaml:"redeem_script"`
	IsExported            null.Bool `boil:"is_exported" json:"is_exported,omitempty" toml:"is_exported" yaml:"is_exported,omitempty"`
	UpdatedAt             null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *addedPubkeyHistoryReceiptR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L addedPubkeyHistoryReceiptL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AddedPubkeyHistoryReceiptColumns = struct {
	ID                    string
	FullPublicKey         string
	AuthAddress1          string
	AuthAddress2          string
	WalletMultisigAddress string
	RedeemScript          string
	IsExported            string
	UpdatedAt             string
}{
	ID:                    "id",
	FullPublicKey:         "full_public_key",
	AuthAddress1:          "auth_address1",
	AuthAddress2:          "auth_address2",
	WalletMultisigAddress: "wallet_multisig_address",
	RedeemScript:          "redeem_script",
	IsExported:            "is_exported",
	UpdatedAt:             "updated_at",
}

// Generated where

var AddedPubkeyHistoryReceiptWhere = struct {
	ID                    whereHelperuint64
	FullPublicKey         whereHelperstring
	AuthAddress1          whereHelperstring
	AuthAddress2          whereHelperstring
	WalletMultisigAddress whereHelperstring
	RedeemScript          whereHelperstring
	IsExported            whereHelpernull_Bool
	UpdatedAt             whereHelpernull_Time
}{
	ID:                    whereHelperuint64{field: "`added_pubkey_history_receipt`.`id`"},
	FullPublicKey:         whereHelperstring{field: "`added_pubkey_history_receipt`.`full_public_key`"},
	AuthAddress1:          whereHelperstring{field: "`added_pubkey_history_receipt`.`auth_address1`"},
	AuthAddress2:          whereHelperstring{field: "`added_pubkey_history_receipt`.`auth_address2`"},
	WalletMultisigAddress: whereHelperstring{field: "`added_pubkey_history_receipt`.`wallet_multisig_address`"},
	RedeemScript:          whereHelperstring{field: "`added_pubkey_history_receipt`.`redeem_script`"},
	IsExported:            whereHelpernull_Bool{field: "`added_pubkey_history_receipt`.`is_exported`"},
	UpdatedAt:             whereHelpernull_Time{field: "`added_pubkey_history_receipt`.`updated_at`"},
}

// AddedPubkeyHistoryReceiptRels is where relationship names are stored.
var AddedPubkeyHistoryReceiptRels = struct {
}{}

// addedPubkeyHistoryReceiptR is where relationships are stored.
type addedPubkeyHistoryReceiptR struct {
}

// NewStruct creates a new relationship struct
func (*addedPubkeyHistoryReceiptR) NewStruct() *addedPubkeyHistoryReceiptR {
	return &addedPubkeyHistoryReceiptR{}
}

// addedPubkeyHistoryReceiptL is where Load methods for each relationship are stored.
type addedPubkeyHistoryReceiptL struct{}

var (
	addedPubkeyHistoryReceiptAllColumns            = []string{"id", "full_public_key", "auth_address1", "auth_address2", "wallet_multisig_address", "redeem_script", "is_exported", "updated_at"}
	addedPubkeyHistoryReceiptColumnsWithoutDefault = []string{"full_public_key", "auth_address1", "auth_address2", "wallet_multisig_address", "redeem_script"}
	addedPubkeyHistoryReceiptColumnsWithDefault    = []string{"id", "is_exported", "updated_at"}
	addedPubkeyHistoryReceiptPrimaryKeyColumns     = []string{"id"}
)

type (
	// AddedPubkeyHistoryReceiptSlice is an alias for a slice of pointers to AddedPubkeyHistoryReceipt.
	// This should generally be used opposed to []AddedPubkeyHistoryReceipt.
	AddedPubkeyHistoryReceiptSlice []*AddedPubkeyHistoryReceipt

	addedPubkeyHistoryReceiptQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	addedPubkeyHistoryReceiptType                 = reflect.TypeOf(&AddedPubkeyHistoryReceipt{})
	addedPubkeyHistoryReceiptMapping              = queries.MakeStructMapping(addedPubkeyHistoryReceiptType)
	addedPubkeyHistoryReceiptPrimaryKeyMapping, _ = queries.BindMapping(addedPubkeyHistoryReceiptType, addedPubkeyHistoryReceiptMapping, addedPubkeyHistoryReceiptPrimaryKeyColumns)
	addedPubkeyHistoryReceiptInsertCacheMut       sync.RWMutex
	addedPubkeyHistoryReceiptInsertCache          = make(map[string]insertCache)
	addedPubkeyHistoryReceiptUpdateCacheMut       sync.RWMutex
	addedPubkeyHistoryReceiptUpdateCache          = make(map[string]updateCache)
	addedPubkeyHistoryReceiptUpsertCacheMut       sync.RWMutex
	addedPubkeyHistoryReceiptUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single addedPubkeyHistoryReceipt record from the query.
func (q addedPubkeyHistoryReceiptQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AddedPubkeyHistoryReceipt, error) {
	o := &AddedPubkeyHistoryReceipt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for added_pubkey_history_receipt")
	}

	return o, nil
}

// All returns all AddedPubkeyHistoryReceipt records from the query.
func (q addedPubkeyHistoryReceiptQuery) All(ctx context.Context, exec boil.ContextExecutor) (AddedPubkeyHistoryReceiptSlice, error) {
	var o []*AddedPubkeyHistoryReceipt

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AddedPubkeyHistoryReceipt slice")
	}

	return o, nil
}

// Count returns the count of all AddedPubkeyHistoryReceipt records in the query.
func (q addedPubkeyHistoryReceiptQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count added_pubkey_history_receipt rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q addedPubkeyHistoryReceiptQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if added_pubkey_history_receipt exists")
	}

	return count > 0, nil
}

// AddedPubkeyHistoryReceipts retrieves all the records using an executor.
func AddedPubkeyHistoryReceipts(mods ...qm.QueryMod) addedPubkeyHistoryReceiptQuery {
	mods = append(mods, qm.From("`added_pubkey_history_receipt`"))
	return addedPubkeyHistoryReceiptQuery{NewQuery(mods...)}
}

// FindAddedPubkeyHistoryReceipt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAddedPubkeyHistoryReceipt(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*AddedPubkeyHistoryReceipt, error) {
	addedPubkeyHistoryReceiptObj := &AddedPubkeyHistoryReceipt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `added_pubkey_history_receipt` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, addedPubkeyHistoryReceiptObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from added_pubkey_history_receipt")
	}

	return addedPubkeyHistoryReceiptObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AddedPubkeyHistoryReceipt) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no added_pubkey_history_receipt provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(addedPubkeyHistoryReceiptColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	addedPubkeyHistoryReceiptInsertCacheMut.RLock()
	cache, cached := addedPubkeyHistoryReceiptInsertCache[key]
	addedPubkeyHistoryReceiptInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			addedPubkeyHistoryReceiptAllColumns,
			addedPubkeyHistoryReceiptColumnsWithDefault,
			addedPubkeyHistoryReceiptColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(addedPubkeyHistoryReceiptType, addedPubkeyHistoryReceiptMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(addedPubkeyHistoryReceiptType, addedPubkeyHistoryReceiptMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `added_pubkey_history_receipt` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `added_pubkey_history_receipt` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `added_pubkey_history_receipt` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, addedPubkeyHistoryReceiptPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into added_pubkey_history_receipt")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == addedPubkeyHistoryReceiptMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for added_pubkey_history_receipt")
	}

CacheNoHooks:
	if !cached {
		addedPubkeyHistoryReceiptInsertCacheMut.Lock()
		addedPubkeyHistoryReceiptInsertCache[key] = cache
		addedPubkeyHistoryReceiptInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AddedPubkeyHistoryReceipt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AddedPubkeyHistoryReceipt) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	addedPubkeyHistoryReceiptUpdateCacheMut.RLock()
	cache, cached := addedPubkeyHistoryReceiptUpdateCache[key]
	addedPubkeyHistoryReceiptUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			addedPubkeyHistoryReceiptAllColumns,
			addedPubkeyHistoryReceiptPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update added_pubkey_history_receipt, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `added_pubkey_history_receipt` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, addedPubkeyHistoryReceiptPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(addedPubkeyHistoryReceiptType, addedPubkeyHistoryReceiptMapping, append(wl, addedPubkeyHistoryReceiptPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update added_pubkey_history_receipt row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for added_pubkey_history_receipt")
	}

	if !cached {
		addedPubkeyHistoryReceiptUpdateCacheMut.Lock()
		addedPubkeyHistoryReceiptUpdateCache[key] = cache
		addedPubkeyHistoryReceiptUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q addedPubkeyHistoryReceiptQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for added_pubkey_history_receipt")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for added_pubkey_history_receipt")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AddedPubkeyHistoryReceiptSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addedPubkeyHistoryReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `added_pubkey_history_receipt` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addedPubkeyHistoryReceiptPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in addedPubkeyHistoryReceipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all addedPubkeyHistoryReceipt")
	}
	return rowsAff, nil
}

var mySQLAddedPubkeyHistoryReceiptUniqueColumns = []string{
	"id",
	"full_public_key",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AddedPubkeyHistoryReceipt) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no added_pubkey_history_receipt provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(addedPubkeyHistoryReceiptColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAddedPubkeyHistoryReceiptUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	addedPubkeyHistoryReceiptUpsertCacheMut.RLock()
	cache, cached := addedPubkeyHistoryReceiptUpsertCache[key]
	addedPubkeyHistoryReceiptUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			addedPubkeyHistoryReceiptAllColumns,
			addedPubkeyHistoryReceiptColumnsWithDefault,
			addedPubkeyHistoryReceiptColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			addedPubkeyHistoryReceiptAllColumns,
			addedPubkeyHistoryReceiptPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert added_pubkey_history_receipt, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "added_pubkey_history_receipt", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `added_pubkey_history_receipt` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(addedPubkeyHistoryReceiptType, addedPubkeyHistoryReceiptMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(addedPubkeyHistoryReceiptType, addedPubkeyHistoryReceiptMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for added_pubkey_history_receipt")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == addedPubkeyHistoryReceiptMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(addedPubkeyHistoryReceiptType, addedPubkeyHistoryReceiptMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for added_pubkey_history_receipt")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for added_pubkey_history_receipt")
	}

CacheNoHooks:
	if !cached {
		addedPubkeyHistoryReceiptUpsertCacheMut.Lock()
		addedPubkeyHistoryReceiptUpsertCache[key] = cache
		addedPubkeyHistoryReceiptUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AddedPubkeyHistoryReceipt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AddedPubkeyHistoryReceipt) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AddedPubkeyHistoryReceipt provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), addedPubkeyHistoryReceiptPrimaryKeyMapping)
	sql := "DELETE FROM `added_pubkey_history_receipt` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from added_pubkey_history_receipt")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for added_pubkey_history_receipt")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q addedPubkeyHistoryReceiptQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no addedPubkeyHistoryReceiptQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from added_pubkey_history_receipt")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for added_pubkey_history_receipt")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AddedPubkeyHistoryReceiptSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addedPubkeyHistoryReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `added_pubkey_history_receipt` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addedPubkeyHistoryReceiptPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from addedPubkeyHistoryReceipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for added_pubkey_history_receipt")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AddedPubkeyHistoryReceipt) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAddedPubkeyHistoryReceipt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddedPubkeyHistoryReceiptSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AddedPubkeyHistoryReceiptSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addedPubkeyHistoryReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `added_pubkey_history_receipt`.* FROM `added_pubkey_history_receipt` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addedPubkeyHistoryReceiptPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AddedPubkeyHistoryReceiptSlice")
	}

	*o = slice

	return nil
}

// AddedPubkeyHistoryReceiptExists checks if the AddedPubkeyHistoryReceipt row exists.
func AddedPubkeyHistoryReceiptExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `added_pubkey_history_receipt` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if added_pubkey_history_receipt exists")
	}

	return exists, nil
}
