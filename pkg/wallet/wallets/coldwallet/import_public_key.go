package coldwallet

import (
	"strings"

	"github.com/pkg/errors"

	"github.com/hiromaily/go-bitcoin/pkg/account"
	"github.com/hiromaily/go-bitcoin/pkg/address"
	models "github.com/hiromaily/go-bitcoin/pkg/models/rdb"
	"github.com/hiromaily/go-bitcoin/pkg/wallet"
)

// ImportPubKey import pubKey from csv file for sign wallet
//  only multisig account is available
func (w *ColdWallet) ImportPubKey(fileName string, accountType account.AccountType) error {
	if w.wtype != wallet.WalletTypeSignature {
		return errors.New("it's available on sign wallet")
	}

	//validate account, only multisig account is ok
	if !account.AccountTypeMultisig[accountType] {
		w.logger.Info("only multisig account is allowed")
		return nil
	}

	//validate file name
	if err := w.addrFileRepo.ValidateFilePath(fileName, accountType); err != nil {
		return err
	}

	// read file for full public key
	pubKeys, err := w.addrFileRepo.ImportAddress(fileName)
	if err != nil {
		return errors.Wrapf(err, "fail to call fileStorager.ImportPubKey() fileName: %s", fileName)
	}

	// insert full pubKey into added_pubkey_history_table
	multisigHistorys := make([]*models.MultisigHistory, len(pubKeys))
	for i, key := range pubKeys {
		inner := strings.Split(key, ",")
		//FullPublicKey is required
		multisigHistorys[i] = &models.MultisigHistory{
			Coin:            w.GetBTC().CoinTypeCode().String(),
			Account:         accountType.String(),
			FullPublicKey:   inner[2],
			AuthAddress1:    "",
			AuthAddress2:    "",
			AuthAddress3:    "",
			MultisigAddress: "",
			RedeemScript:    "",
		}
	}
	//TODO:Upsert would be better to prevent error which occur when data is already inserted
	err = w.repo.MultisigHistory().InsertBulk(multisigHistorys)
	if err != nil {
		if strings.Contains(err.Error(), "1062: Duplicate entry") {
			w.logger.Info("full-pubkey is already imported")
		} else {
			return errors.Wrap(err, "fail to call repo.InsertAddedPubkeyHistoryTable()")
		}
	}

	return nil
}

// ImportMultisigAddress import multisig address generated by sign wallet into database
func (w *ColdWallet) ImportMultisigAddress(fileName string, accountType account.AccountType) error {
	if w.wtype != wallet.WalletTypeKeyGen {
		return errors.New("it's available on keygen wallet")
	}
	// validate
	if !account.AccountTypeMultisig[accountType] {
		w.logger.Info("only multisig account is allowed")
		return nil
	}
	if err := w.addrFileRepo.ValidateFilePath(fileName, accountType); err != nil {
		return err
	}

	// read file for full public key
	pubKeys, err := w.addrFileRepo.ImportAddress(fileName)
	if err != nil {
		return errors.Errorf("key.ImportPubKey() error: %s", err)
	}

	//added_pubkey_history_receiptテーブルにInsert
	accountKeyTable := make([]*models.AccountKey, len(pubKeys))

	for i, pubkey := range pubKeys {
		inner := strings.Split(pubkey, ",")
		// csv file structure
		//	record.FullPublicKey,
		//	record.AuthAddress1,
		//	record.AuthAddress2,
		//	record.WalletMultisigAddress,
		//	record.RedeemScript,
		accountKeyTable[i] = &models.AccountKey{
			FullPublicKey:   inner[0],
			MultisigAddress: inner[3],
			RedeemScript:    inner[4],
			AddrStatus:      address.AddrStatusMultiAddressImported.Int8(),
		}
	}
	//TODO: Upsert would be better??
	_, err = w.repo.AccountKey().UpdateMultisigAddr(accountType, accountKeyTable)
	if err != nil {
		return errors.Wrapf(err, "fail to call repo.AccountKey().UpdateMultisigAddr()")
	}

	return nil
}
