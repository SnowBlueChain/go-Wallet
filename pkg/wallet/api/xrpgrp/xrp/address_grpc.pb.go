// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: address.proto

package xrp

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RippleAddressAPIClient is the client API for RippleAddressAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RippleAddressAPIClient interface {
	// https://xrpl.org/rippleapi-reference.html#generateaddress
	GenerateAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGenerateAddress, error)
	// https://xrpl.org/rippleapi-reference.html#generatexaddress
	GenerateXAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGenerateXAddress, error)
	// https://xrpl.org/rippleapi-reference.html#isvalidaddress
	IsValidAddress(ctx context.Context, in *RequestIsValidAddress, opts ...grpc.CallOption) (*ResponseIsValidAddress, error)
}

type rippleAddressAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRippleAddressAPIClient(cc grpc.ClientConnInterface) RippleAddressAPIClient {
	return &rippleAddressAPIClient{cc}
}

func (c *rippleAddressAPIClient) GenerateAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGenerateAddress, error) {
	out := new(ResponseGenerateAddress)
	err := c.cc.Invoke(ctx, "/rippleapi.address.RippleAddressAPI/GenerateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rippleAddressAPIClient) GenerateXAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGenerateXAddress, error) {
	out := new(ResponseGenerateXAddress)
	err := c.cc.Invoke(ctx, "/rippleapi.address.RippleAddressAPI/GenerateXAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rippleAddressAPIClient) IsValidAddress(ctx context.Context, in *RequestIsValidAddress, opts ...grpc.CallOption) (*ResponseIsValidAddress, error) {
	out := new(ResponseIsValidAddress)
	err := c.cc.Invoke(ctx, "/rippleapi.address.RippleAddressAPI/IsValidAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RippleAddressAPIServer is the server API for RippleAddressAPI service.
// All implementations must embed UnimplementedRippleAddressAPIServer
// for forward compatibility
type RippleAddressAPIServer interface {
	// https://xrpl.org/rippleapi-reference.html#generateaddress
	GenerateAddress(context.Context, *emptypb.Empty) (*ResponseGenerateAddress, error)
	// https://xrpl.org/rippleapi-reference.html#generatexaddress
	GenerateXAddress(context.Context, *emptypb.Empty) (*ResponseGenerateXAddress, error)
	// https://xrpl.org/rippleapi-reference.html#isvalidaddress
	IsValidAddress(context.Context, *RequestIsValidAddress) (*ResponseIsValidAddress, error)
	mustEmbedUnimplementedRippleAddressAPIServer()
}

// UnimplementedRippleAddressAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRippleAddressAPIServer struct {
}

func (UnimplementedRippleAddressAPIServer) GenerateAddress(context.Context, *emptypb.Empty) (*ResponseGenerateAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAddress not implemented")
}
func (UnimplementedRippleAddressAPIServer) GenerateXAddress(context.Context, *emptypb.Empty) (*ResponseGenerateXAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateXAddress not implemented")
}
func (UnimplementedRippleAddressAPIServer) IsValidAddress(context.Context, *RequestIsValidAddress) (*ResponseIsValidAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidAddress not implemented")
}
func (UnimplementedRippleAddressAPIServer) mustEmbedUnimplementedRippleAddressAPIServer() {}

// UnsafeRippleAddressAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RippleAddressAPIServer will
// result in compilation errors.
type UnsafeRippleAddressAPIServer interface {
	mustEmbedUnimplementedRippleAddressAPIServer()
}

func RegisterRippleAddressAPIServer(s grpc.ServiceRegistrar, srv RippleAddressAPIServer) {
	s.RegisterService(&RippleAddressAPI_ServiceDesc, srv)
}

func _RippleAddressAPI_GenerateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleAddressAPIServer).GenerateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.address.RippleAddressAPI/GenerateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleAddressAPIServer).GenerateAddress(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RippleAddressAPI_GenerateXAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleAddressAPIServer).GenerateXAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.address.RippleAddressAPI/GenerateXAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleAddressAPIServer).GenerateXAddress(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RippleAddressAPI_IsValidAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestIsValidAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleAddressAPIServer).IsValidAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.address.RippleAddressAPI/IsValidAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleAddressAPIServer).IsValidAddress(ctx, req.(*RequestIsValidAddress))
	}
	return interceptor(ctx, in, info, handler)
}

// RippleAddressAPI_ServiceDesc is the grpc.ServiceDesc for RippleAddressAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RippleAddressAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rippleapi.address.RippleAddressAPI",
	HandlerType: (*RippleAddressAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAddress",
			Handler:    _RippleAddressAPI_GenerateAddress_Handler,
		},
		{
			MethodName: "GenerateXAddress",
			Handler:    _RippleAddressAPI_GenerateXAddress_Handler,
		},
		{
			MethodName: "IsValidAddress",
			Handler:    _RippleAddressAPI_IsValidAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address.proto",
}
