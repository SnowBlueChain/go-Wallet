// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: account.proto

package xrp

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RippleAccountAPIClient is the client API for RippleAccountAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RippleAccountAPIClient interface {
	// https://xrpl.org/rippleapi-reference.html#getaccountinfo
	GetAccountInfo(ctx context.Context, in *RequestGetAccountInfo, opts ...grpc.CallOption) (*ResponseGetAccountInfo, error)
}

type rippleAccountAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRippleAccountAPIClient(cc grpc.ClientConnInterface) RippleAccountAPIClient {
	return &rippleAccountAPIClient{cc}
}

func (c *rippleAccountAPIClient) GetAccountInfo(ctx context.Context, in *RequestGetAccountInfo, opts ...grpc.CallOption) (*ResponseGetAccountInfo, error) {
	out := new(ResponseGetAccountInfo)
	err := c.cc.Invoke(ctx, "/rippleapi.account.RippleAccountAPI/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RippleAccountAPIServer is the server API for RippleAccountAPI service.
// All implementations must embed UnimplementedRippleAccountAPIServer
// for forward compatibility
type RippleAccountAPIServer interface {
	// https://xrpl.org/rippleapi-reference.html#getaccountinfo
	GetAccountInfo(context.Context, *RequestGetAccountInfo) (*ResponseGetAccountInfo, error)
	mustEmbedUnimplementedRippleAccountAPIServer()
}

// UnimplementedRippleAccountAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRippleAccountAPIServer struct {
}

func (UnimplementedRippleAccountAPIServer) GetAccountInfo(context.Context, *RequestGetAccountInfo) (*ResponseGetAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedRippleAccountAPIServer) mustEmbedUnimplementedRippleAccountAPIServer() {}

// UnsafeRippleAccountAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RippleAccountAPIServer will
// result in compilation errors.
type UnsafeRippleAccountAPIServer interface {
	mustEmbedUnimplementedRippleAccountAPIServer()
}

func RegisterRippleAccountAPIServer(s grpc.ServiceRegistrar, srv RippleAccountAPIServer) {
	s.RegisterService(&RippleAccountAPI_ServiceDesc, srv)
}

func _RippleAccountAPI_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleAccountAPIServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.account.RippleAccountAPI/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleAccountAPIServer).GetAccountInfo(ctx, req.(*RequestGetAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RippleAccountAPI_ServiceDesc is the grpc.ServiceDesc for RippleAccountAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RippleAccountAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rippleapi.account.RippleAccountAPI",
	HandlerType: (*RippleAccountAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountInfo",
			Handler:    _RippleAccountAPI_GetAccountInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
